Kubernetes EKS
Introduction to Kubernetes Architecture and Deployments

Slides based on [[https://kubernetes.io/docs/home/?path=users&persona=app-developer&level=foundational][_Kubernetes_ _Documentation_]]
Tags: kubernetes, docker, containers, microservices, eks, aws

Rael Garcia and Ignacio Alonso
Systems Engineer at CAPSiDE

@raelga

https://github.com/raelga/talks

* Microservices

.image images/microservices.png _ 900

.caption Monolithic vs Microservices by [[https://www.weave.works][weave.works]]

* Infrastructure lifecycles

.image images/servers-to-serverless.png 500 _

.caption How Will Docker Respond to the Serverless Future? by [[https://www.contino.io/insights/how-will-docker-respond-to-the-serverless-future][contino.io]]

* Docker

.image images/docker-package-software.png 500 _

* Storage, Packaging and Distribution

.image images/obligatory-cointainer-boat-photo.png 500 _

* Orchestration

.image images/kubernetes-logo.png

* What does Kubernetes mean? K8s?

The name Kubernetes originates from Greek, meaning steersman or pilot, and is the root of _governor_ and _cybernetic_.

.image images/kubernetes-greek-etymology.png

K8s is an abbreviation derived by replacing the 8 letters “ubernete” with “8”.

* What is Kubernetes?

Kubernetes is a portable, extensible open-source *platform* *for* *managing* *containerized* *workloads* *and* *services*, that facilitates both declarative configuration and automation.

It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available since Google *open-sourced* the Kubernetes project in 2014.

Kubernetes builds upon a decade and a half of experience that Google has with running production workloads at scale, combined with best-of-breed ideas and practices from the community.

* Kubernetes Architecture

.image images/kubernetes-cluster.png 480 _

.caption Kubernetes by [[https://en.wikipedia.org/wiki/Kubernetes][wikipedia]]

* Kubernetes Cloud Architecture

.image images/kubernetes-cloud-cluster.png 400 _

.caption Concepts Underlying the Cloud Controller Manager at [[https://kubernetes.io/docs/concepts/architecture/cloud-controller/][kubernetes,io]]

* Kubernetes Components: Nodes (1)

- *Container* *Runtime*

The container runtime is the software that is responsible for running containers.

.image images/kubernetes-node.svg 340 _

* Pods

- Is the smallest and simplest unit in the Kubernetes object model that you create or deploy.

- Encapsulates:
 - Application container (or multiple containers), 
 - Storage resources,
 - A unique network IP,
 - Options that govern how the container(s) should run.

- Represents a unit of deployment: a single instance of an application in Kubernetes.

.image images/pods.svg 250 _

* Pods - Single container deployment

- Pods that run a single container.

The “one-container-per-Pod” model is the most common Kubernetes use case.

You can think of a Pod as a wrapper around a single container, and Kubernetes manages the Pods rather than the containers directly.

.code yml/pod-single.yml
.caption [[_yml/pod-single.yml_][yml/pod-single.yml]]

* Pods - Multiple containers deployment (1)

- Pods that run multiple containers that need to work together.

A Pod might encapsulate an application composed of multiple co-located containers that are tightly coupled and *need* *to* *share* *resources*. The Pod wraps these containers and storage resources together as a single manageable entity.

These co-located containers might form a single cohesive unit of service–one container serving files from a shared volume to the public, while a separate “*sidecar*” container refreshes or updates those files. 

.image images/pod.svg 250 _

* Pods - Network

- Each Pod *unique* *IP* *address*.

- Every container in a Pod shares IP address and network ports.

- Containers inside a Pod can communicate with one another using localhost.

- Containers inside a Pod  must coordinate how they use the shared network resources (such as ports).

.image images/pods-network.png 250 _

* Pods - Storage

- Can share data.

- Volumes allow persistent data -> a container restart won't cause data loss.

.image images/pods-storage.png 250 _

* Pods - Multiple containers deployment

.code yml/pod-multi.yml
.caption [[_yml/pod-multi.yml_][yml/pod-multi.yml]]

* Pods - Lifecycle

.image images/PodsLifeCycle.jpg 500 _
.caption Pods status

* Pods - Liveness Health check

- Indicates whether the Container is running.

- If it fails, *kubelet* *kills* *the* *Container*, and the Container is subjected to its *restart* *policy*.

- The default state is *Success*.

.code yml/pod-health-http-liveness.yml
.caption [[_yml/pod-health-http-liveness.yml_][yml/pod-health-http-liveness.yml]]

* Pods - Readiness Health check (1)

- Indicates whether the Container is ready to service requests.

- If it fails, Pod’s IP address is removed from endpoints of all Services.

- If configured *default* *state* of readiness before the initial delay is *Failure*.

- If a Container does not provide a readiness probe, the default state is *Success*.

* Pods - Readiness Health check (2)

.code yml/pod-health-cmd-readiness.yml
.caption [[_yml/pod-health-cmd-readiness.yml_][yml/pod-health-cmd-readiness.yml]]

* Pods - Health check use cases

- If the process in your Container is able to crash on its own whenever it encounters an issue or becomes unhealthy; the *kubelet* will automatically perform the correct action in accordance with the Pod’s *restartPolicy*.

- If you’d like your Container to be killed and restarted if a probe fails, then specify a *liveness* *probe*, and specify a *restartPolicy* of *Always* or *OnFailure*.

- If you’d like to start sending traffic to a Pod only when a probe succeeds, specify a *readiness* *probe*. The readiness probe might be the same as the liveness probe, but the existence of the readiness probe in the spec means that the Pod will start without receiving any traffic until the probe starts succeeding.

- If your Container needs to work on loading large data, configuration files, or migrations during startup, specify a *readiness* *probe*.

- If you want your Container to be able to take itself down for maintenance, you can specify a *readiness* *probe* that checks an endpoint specific to readiness that is different from the liveness probe.

* Pods - Health checks (3)

.code yml/pod-health-tcp-both.yml
.caption [[_yml/pod-health-tcp-both.yml_][yml/pod-health-tcp-both.yml]]

* Namespaces

- Multiple virtual clusters.

- Names of resources need to be unique

- Usage:
 - Environments with many users from multiple teams or projects.
 - Resource quota -> divide cluster resources between users.

- DNS entry:
 - <service-name>.<namespace-name>.svc.cluster.local
 - <service-name> will resolve to the service which is local to a namespace.

- command:
  $ kubectl --namespace=<namespace-name> get pods
  $ kubectl config set-context $(kubectl config current-context) --namespace=<namespace-name>

* Annotations

- Attach arbitrary non-identifying metadata to objects.
- Clients (tools and libraries) can retrieve this metadata.
- Usage:
 - Addons may use annotations to look for services IDs, URLs, etc.

- Example:
  metadata:
    annotations:
      key1: value1
      key2: value2

* Labels 

- Key/value pairs attached to objects (pods).
- Each Key must be unique for an object.
- Usage:
 - Several key/value pairs to each object.
 - Specify identifying attributes.
 - Organize/select subsets of objects.
 - Attached to objects at creation time.
 - Can be modified at any time.
- Example:
  metadata:
    labels:
      release: stable
      environment: dev
      tier: frontend

* Label Selectors

- Do not provide uniqueness.
- Equality-based and set-based.
- Usage:
 - Identify a set of objects.
 - For multiple requirements all must be satisfied (comma separator == AND).
 - Empty label selector selects every object in the collection.
 - Canary test can be performed with labels.

* Label Selectors - Equality-based requirement

- Allow filtering by label keys and values.

- Matching objects must satisfy all of the specified label constraints, though they may have additional labels as well. 

- Operators:
 - *=*
 - *==*
 - *!=*

- Command:
  $ kubectl get pods -l 'environment=production, tier!=frontend'

* Label Selectors - Equality-based requirement (2)

.code yml/pod-selector-equality.yml
.caption [[_yml/pod-selector-equality.yml_][yml/pod-selector-equality.yml]]

* Label Selectors - Set-based requirements

- Allow filtering keys according to a set of values. 
 
- Operators:
 - in
 - notin
 - exists

- Command:
  $ kubectl get pods -l 'environment in (production, qa)'

* Label Selectors - Set-based requirements (2)

.code yml/pod-selector-set.yml
.caption [[_yml/pod-selector-set.yml_][yml/pod-selector-set.yml]]

* Pods - Reference

.link https://coreos.com/kubernetes/docs/latest/pods.html Overview of a Pod

.link https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/ Pod overview

.link https://kubernetes.io/blog/2016/06/container-design-patterns Container design patterns

.link https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns Patterns for Composite Containers

.link https://kubernetes-v1-4.github.io/docs/user-guide/pods/single-container/ Creating Single-Container Pods

.link https://kubernetes-v1-4.github.io/docs/user-guide/pods/multi-container/ Creating Multi-Container Pods

.link https://www.mirantis.com/blog/multi-container-pods-and-container-communication-in-kubernetes/ Multi-container pods and container communication in Kubernetes

* Controller

- Create and manage multiple Pods
- Handling replication
- Rollout
- Self-healing capabilities at cluster scope.

* ReplicaSet and Replication Controller

- ReplicaSet next-generation of Replication Controller
- ReplicaSet adds the selector support.
- ReplicaSet supports set-based selector requirements.
- Replication Controller only supports equality-based selector requirements.

* ReplicaSet and Replication Controller (2)

.code yml/replicaset-selector-set.yml
.caption [[_yml/replicaset-selector-set.yml_][yml/replicaset-selector-set.yml]]

* Deployments

- Declarative updates for Pods and ReplicaSets.

- You describe a desired state.

- Deployment controller applies changes to match new state.

.code yml/replicaset-deployment.yml
.caption [[_yml/replicaset-deployment.yml_][yml/replicaset-deployment.yml]]

* Deployments - Resource Limits

When resource requests specified:

- Scheduler better decisions about which nodes to place Pods on.
- Contention for resources on a node.

* Deployments - Resource Limits (2)

.code yml/deployment-resources.yml
.caption [[_yml/deployment-resources.yml_][yml/deployment-resources.yml]]

* Deployments - Strategy

Specifies the strategy used to replace old Pods by new ones.

- *Recreate* *Deployment*

All Pods are killed before new ones are created

 spec.strategy.type==Recreate

- *Rolling* *Update* *Deployment*

Udates Pods in a rolling update fashion

 spec.strategy.type==RollingUpdate

Options during update process:

 - maxUnavailable
 - maxSurge (maximum number that can be created)

.link https://kubernetes.io/docs/tutorials/kubernetes-basics/update-intro/ Kubernetes Rolling Updates

* Deployments - Rollback

- By default, Deployment’s rollout history is kept.
- You can modify revision history limit.
- You can rollback at anytime 

  $ kubectl rollout history deployment/nginx-deployment
  deployments "nginx-deployment"
  REVISION    CHANGE-CAUSE
  1           kubectl create -f docs/user-guide/nginx-deployment.yaml --record
  2           kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1
  3           kubectl set image deployment/nginx-deployment nginx=nginx:1.91

  $ kubectl rollout undo deployment/nginx-deployment --to-revision=2
  deployment "nginx-deployment" rolled back

* Horizontal Pod Autoscaler

- Automatically scales the number of pods:
 - Replication controller
 - Deployment
 - Replica set
- Scales based on:
 - CPU utilization
 - Custom metrics
 - Some other application-provided metrics

* Horizontal Pod Autoscaler (2)

- *Does* *not* *apply* *to* *objects* *that* *can’t* *be* *scaled*, for example, DaemonSets.
- You must set *requests* to limit CPU/mem otherwise HPA will fail.

.code yml/replicaset-hpa.yml
.caption [[_yml/replicaset-hpa.yml_][yml/replicaset-hpa.yml]]

* Extra Slide : Kubernetes Comic

.image images/kubernetes-comic.png 500 _

.caption [[https://cloud.google.com/kubernetes-engine/kubernetes-comic/][Kubernetes Comic]]
